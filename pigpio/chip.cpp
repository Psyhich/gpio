////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018 Dimitry Ishenko
// Contact: dimitry (dot) ishenko (at) (gee) mail (dot) com
//
// Distributed under the GNU GPL license. See the LICENSE.md file for details.

////////////////////////////////////////////////////////////////////////////////
#include "chip.hpp"
#include "pin.hpp"
#include "type_id.hpp"

#include <stdexcept>
#include <utility>

#include <pigpio.h>

////////////////////////////////////////////////////////////////////////////////
namespace gpio
{
namespace pigpio
{

////////////////////////////////////////////////////////////////////////////////
chip::chip(asio::io_context& io) : chip_base("pigpio")
{
    if(gpioInitialise() < 0) throw std::runtime_error(
        type_id(this) + ": Error initializing pigpio library"
    );

    for(gpio::pos n = 0; n < 32; ++n)
        pins_.emplace_back(new pigpio::pin(io, this, n));
}

////////////////////////////////////////////////////////////////////////////////
chip::~chip()
{
    pins_.clear();
    gpioTerminate();
}

////////////////////////////////////////////////////////////////////////////////
}

////////////////////////////////////////////////////////////////////////////////
unique_chip get_chip(asio::io_context& io, std::string)
{
    return std::make_unique<pigpio::chip>(io);
}

////////////////////////////////////////////////////////////////////////////////
}
